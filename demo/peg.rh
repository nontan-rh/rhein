
class PegContext {
    syntax_table
}

def report(x) {
    print(x[0], x[1], x[2].to_string())
}

def pref(x : symbol) {
    pdynamic(^{ ctx, src -> ctx.syntax_table[x].parse(ctx, src) })
}

def print_ast(x : array) {
    local i = 0
    write("[")
    while i < x.length() - 1 {
        print_ast(x[i])
        write(",")
        i = i + 1
    }
    print_ast(x[i])
    write("]")
}

def print_ast(x : any) {
    write(x)
}

def main() {
    pstr("hello").parse(nil, "hello".to_list()).report()

    pchar().add(?a, ?z).parse(nil, "hello".to_list()).report()
    pchar().add(?a, ?z).parse(nil, "aello".to_list()).report()
    pchar().add(?a, ?z).parse(nil, "zello".to_list()).report()
    pchar().add(?a, ?z).parse(nil, "Hello".to_list()).report()

    pchar().add(?a, ?z).star().parse(nil, "hello".to_list()).report()
    pchar().add(?a, ?z).star().parse(nil, "Hello".to_list()).report()
    pchar().add(?a, ?z).plus().parse(nil, "hello".to_list()).report()
    pchar().add(?a, ?z).plus().parse(nil, "Hello".to_list()).report()
    pchar().add(?a, ?z).times(1, 4).parse(nil, "hello".to_list()).report()
    pchar().add(?a, ?z).times(1, 4).parse(nil, "Hello".to_list()).report()
    pchar().add(?a, ?z).times(1, 4).parse(nil, "helLo".to_list()).report()
    pchar().add(?a, ?z).times(4, 4).parse(nil, "hellO".to_list()).report()

    print("pstr")
    pstr(";").parse(nil, ";".to_list()).report()

    pstr("he").andp().parse(nil, "hello".to_list()).report()
    pstr("he").andp().parse(nil, "Hello".to_list()).report()
    pstr("he").notp().parse(nil, "hello".to_list()).report()
    pstr("he").notp().parse(nil, "Hello".to_list()).report()

    pseq(pstr("he"), pstr("l"), pstr("lo")).parse(nil, "hello".to_list()).report()
    pseq(pstr("he"), pstr("L"), pstr("lo")).parse(nil, "hello".to_list()).report()
    pseq(pstr("he")).parse(nil, "hello".to_list()).report()
    pseq().parse(nil, "hello".to_list()).report()

    pchoice(pstr("he"), pstr("He"), pstr("hE")).parse(nil, "hello".to_list()).report()
    pchoice(pstr("he"), pstr("He"), pstr("hE")).parse(nil, "Hello".to_list()).report()
    pchoice(pstr("he"), pstr("He"), pstr("hE")).parse(nil, "hEllo".to_list()).report()
    pchoice().parse(nil, "hello".to_list()).report()

    pstr("hello").paction(^{ x -> print(x); x}).parse(nil, "hello".to_list()).report()

    pany().parse(nil, "hello".to_list()).report()
    pany().parse(nil, "".to_list()).report()

    print("pconst")
    pany().pconst(:hello).parse(nil, "aaaa".to_list()).report()
    pany().pconst(:hello).parse(nil, "".to_list()).report()

    print("pnull")
    pnull.parse(nil, "".to_list()).report()

    pdynamic(^{ ctx, src -> pstr("hello").parse(ctx, src) }).parse(nil, "hello".to_list()).report()

    local ctx = ~PegContext.new()
    ctx.syntax_table = { :hello = pstr("hello") }
    pref(:hello).parse(ctx, "hello".to_list()).report()

    local r = pseq(pstr("he"), pstr("l"), pstr("lo")).pperm(2,0).parse(nil, "hello".to_list())[1]
    print(r[0], r[1])

    psseq(pstr(" "), 0, 1, pstr("he"), pstr("l"), pstr("lo")).parse(nil, "he l lo a".to_list()).report()

    pchain_left(pstr("1"), pstr("+"), :binary_expr).parse(nil, "1+1+1+1+1+".to_list())[1].print_ast()
    print()
    pskip(pstr("1"), pstr(" "), pstr(" ")).parse(nil, "11".to_list()).report()
}

